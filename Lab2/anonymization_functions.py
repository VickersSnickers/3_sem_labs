import pandas as pd
import numpy as np
from datetime import datetime
from random import shuffle

symptom_local_aggregation = {
    "Болевые симптомы": [
        "Боль в горле",
        "Боль в груди",
        "Боль в животе",
        "Боль в мышцах",
        "Боль в пояснице",
        "Боль в суставах",
        "Боль в ухе",
        "Головная боль",
        "Тяжесть в желудке"
    ],
    
    "Респираторные симптомы": [
        "Кашель",
        "Заложенность носа",
        "Насморк",
        "Хриплый голос",
        "Трудно дышать",
        "Частые простуды",
        "Ощущение кома в горле"
    ],
    
    "Кожные и волосистые покровы": [
        "Выпадение волос",
        "Высыпания на коже",
        "Зуд",
        "Покраснение кожи",
        "Сухость кожи",
        "Синяки без причины"
    ],
    
    "Желудочно-кишечные симптомы": [
        "Запор",
        "Изжога",
        "Рвота",
        "Тошнота",
        "Металлический привкус во рту"
    ],
    
    "Общие симптомы": [
        "Ломота в теле",
        "Повышенная температура",
        "Постоянная усталость",
        "Потеря аппетита",
        "Потеря веса",
        "Потливость",
        "Увеличение веса"
    ],
    
    "Неврологические симптомы": [
        "Головокружение при вставании",
        "Кружится голова",
        "Двоение в глазах",
        "Тремор рук",
        "Шум в ушах",
        "Слабость в ногах",
        "Ухудшение зрения"
    ],
    
    "Урологические симптомы": [
        "Жжение при мочеиспускании",
        "Кровь в моче",
        "Частое мочеиспускание"
    ],
    
    "Лимфатическая система и сердце": [
        "Увеличенные лимфоузлы",
        "Учащённое сердцебиение"
    ]
}

test_local_aggregation = {
    "Гормональные исследования": [
        "Тестостерон общий", "Эстрадиол (Е2)", "Прогестерон", "Кортизол",
        "АКТГ", "ЛГ (лютеинизирующий гормон)", "ФСГ (фолликулостимулирующий гормон)",
        "ТТГ", "Трийодтиронин свободный", "Тироксин свободный (Т4)",
        "Пролактин", "Ренин", "Альдостерон", "Дигидротестостерон",
        "Тестостерон свободный"
    ],

    "Биохимические исследования": [
        "Глюкоза", "Креатинин", "Мочевина", "Липидный профиль", "Щелочная фосфатаза",
        "Билирубин общий", "Лактатдегидрогеназа (ЛДГ)", "Ферритин", "Общий белок",
        "Магний", "Кальций общий", "Кальций ионизированный"
    ],

    "Общеклинические анализы крови": [
        "Клинический анализ крови (5 DIFF)", "СОЭ", "Лейкоцитарная формула",
        "Клинический анализ крови с лейкоцитарной формулой"
    ],

    "Общеклинические анализы мочи": [
        "Общий анализ мочи", "Анализ мочи по Зимницкому", "Анализ мочи по Нечипоренко",
        "3-х стаканная проба мочи", "Микроальбумин суточной мочи", "Глюкоза суточной мочи",
        "Кальций в разовой порции мочи", "Альфа-амилаза (диастаза) в разовой порции мочи",
        "Общие метанефрины и норметанефрины в суточной моче"
    ],

    "Иммунологические тесты": [
        "Антитела", "Иммуноглобулин", "IgG", "IgM", "IgA", "ANA", "ANCA",
        "Ревматоидный фактор (РФ)", "ACCP", "Анти-ТПО", "Антитела к глутаматдекарбоксилазе (GAD)"
    ],

    "Молекулярно-генетические исследования": [
        "ПЦР", "ДНК", "РНК", "Генодиагностика", "Генотипирование", "Типирование грибов"
    ],

    "Микробиологические и паразитологические исследования": [
        "Посев", "Микроскопическое исследование мазков", "Соскоб", "Демодекс", "Паразиты",
        "Исследование кала на простейшие", "Аскариды", "Бруцеллез", "Возбудители коклюша"
    ],

    "Витамины и микроэлементы": [
        "Витамин D", "Витамин B12", "Витамин B1", "Витамин B6", "Витамин К", "Витамин А",
        "Витамин E", "Цинк", "Медь", "Селен"
    ],

    "Коагулограмма и гемостаз": [
        "Коагулограмма", "АЧТВ", "Протромбин", "Д-димер", "Антитромбин III",
        "Протеин C", "Протеин S", "Альфа-амилаза"
    ],

    "Аллергологические тесты": [
        "Панель аллергенов", "IgE", "Аллерген", "Аллергологические тесты"
    ],

    "Онкомаркеры": [
        "СА-125", "HE4", "ПСА", "Онкомаркер", "Прогностическая вероятность (ROMA)"
    ],

    "Прочие исследования": [
        "ГастроПанель ®", "Типирование вируса гриппа", "Прочие уникальные тесты",
        "Катехоламины", "Серотонин", "Квантифероновый тест TB Gold Plus",
        "Диагностика гепатитов", "Общий белок суточной мочи"
    ]
}

doctors_local_aggregation = {
    "Терапевтический блок": [
        "Терапевт",
        "Кардиолог",
        "Пульмонолог",
        "Гастроэнтеролог",
        "Ревматолог",
        "Эндокринолог",
        "Невролог",
        "Инфекционист",
        "Гематолог",
        "Аллерголог",
        "Иммунолог",
        "Физиотерапевт",
        "Семейный врач"
    ],
    "Хирургический блок": [
        "Хирург",
        "Ортопед",
        "Вертебролог"
    ],
    "Специалисты органов чувств": [
        "ЛОР",
        "Сурдолог",
        "Офтальмолог",
        "Фониатр",
        "Дерматолог",
        "Стоматолог",
        "Уролог"
    ]
}

names = {'Смирнов':'М','Иванов':'М','Кузнецов':'М','Попов':'М','Соколов':'М',
         'Лебедев':'М','Козлов':'М','Новиков':'М','Морозов':'М','Петров':'М',
         'Волков':'М','Соловьев':'М','Виноградов':'М','Богданов':'М','Васильев':'М',
         'Зайцев':'М','Павлов':'М','Семенов':'М','Григорьев':'М','Кузьмин':'М',
         'Куликов':'М','Киселев':'М','Макаров':'М','Александров':'М','Михайлов':'М',
         'Федоров':'М','Сергеев':'М','Орлов':'М','Никитин':'М','Тихонов':'М','Беликов':'М',
         'Карпов':'М','Данилов':'М','Борисов':'М','Тарасов':'М','Воронов':'М','Егоров':'М',
         'Котов':'М','Дмитриев':'М','Лазарев':'М','Сафонов':'М','Гусев':'М','Коновалов':'М',
         'Мельников':'М','Крылов':'М','Власов':'М','Ширяев':'М','Панфилов':'М','Дорофеев':'М',
         'Игнатьев':'М','Конов':'М','Фролов':'М','Смирнова':'Ж','Иванова':'Ж','Кузнецова':'Ж',
         'Попова':'Ж','Соколова':'Ж','Лебедева':'Ж','Козлова':'Ж','Новикова':'Ж','Морозова':'Ж',
         'Петрова':'Ж','Волкова':'Ж','Соловьева':'Ж','Виноградова':'Ж','Богданова':'Ж','Васильева':'Ж',
         'Зайцева':'Ж','Павлова':'Ж','Семенова':'Ж','Григорьева':'Ж','Кузьмина':'Ж','Куликова':'Ж',
         'Киселева':'Ж','Макарова':'Ж','Александрова':'Ж','Михайлова':'Ж','Федорова':'Ж','Сергеева':'Ж',
         'Орлова':'Ж','Никитина':'Ж','Тихонова':'Ж','Беликова':'Ж','Карпова':'Ж','Данилова':'Ж',
         'Борисова':'Ж','Тарасова':'Ж','Воронова':'Ж','Егорова':'Ж','Котова':'Ж','Дмитриева':'Ж',
         'Лазарева':'Ж','Сафонова':'Ж','Гусева':'Ж','Коновалова':'Ж','Мельникова':'Ж','Крылова':'Ж',
         'Власова':'Ж','Ширяева':'Ж','Панфилова':'Ж','Дорофеева':'Ж','Игнатьева':'Ж','Конова':'Ж'}

card_data = [
    ["Сбербанк", [
        ["Мир", ["220100", "220220"]],
        ["Visa", ["427402", "427406", "427411"]],
        ["Mastercard", ["559901", "559521", "557000"]],
        ["UnionPay", ["623371", "623372"]]]],
    ["Тинькофф", [
        ["Мир", ["220070"]],
        ["Visa", ["415428", "415429"]],
        ["Mastercard", ["553691", "553420", "551960"]],
        ["UnionPay", ["623373"]]]],
    ["ВТБ", [
        ["Мир", ["220024"]],
        ["Visa", ["489195", "489196"]],
        ["Mastercard", ["518704", "518373"]],
        ["UnionPay", ["623374"]]]],
    ["АльфаБанк", [
        ["Мир", ["220015"]],
        ["Visa", ["410584", "415400"]],
        ["Mastercard", ["555949"]],
        ["UnionPay", ["623375"]]]],
    ["ГазпромБанк", [
        ["Мир", ["220001"]],
        ["Visa", ["404136", "404270"]],
        ["Mastercard", ["539839", "544026"]],
        ["UnionPay", ["623376"]]]]
]

def get_season(date: datetime) -> str:
    month = date.month
    if month in (12, 1, 2):
        return "Зима"
    elif month in (3, 4, 5):
        return "Весна"
    elif month in (6, 7, 8):
        return "Лето"
    else:
        return "Осень"
    
def get_bank(card_number: int) -> str:
    bin_code = str(card_number)[:6]
    for bank_name, systems in card_data:
        for _, bins in systems:
            if bin_code in bins:
                return bank_name
    return "Неизвестный банк"

def change_to_gender(SNP: str) -> str:
    for s, g in names.items():
        if s == SNP.split(' ')[0]:
            if g == 'М': return 'Мужчина'
            else: return 'Женщина'

def anonymize_SNP(df: pd.DataFrame) -> None:
    df['ФИО'] = df['ФИО'].apply(change_to_gender)

def anonymize_passport(df: pd.DataFrame) -> None:
    df['Паспортные данные'] = df['Паспортные данные'].apply(lambda x: 'Удалено')

def anonymize_snils(df: pd.DataFrame) -> None:
    df['СНИЛС'] = df['СНИЛС'].apply(lambda x: 'Удалено')

def anonymize_bankcard(df: pd.DataFrame) -> None:
    df['Карта оплаты'] = df['Карта оплаты'].apply(get_bank)

def anonymize_price(df: pd.DataFrame) -> None:
    df['Стоимость анализов'] = pd.qcut(df['Стоимость анализов'], q=3, duplicates='drop')

def anonymize_dates_visit(df: pd.DataFrame) -> None:
    df['Дата посещения врача'] = pd.to_datetime(df['Дата посещения врача'], errors='coerce')
    df['Дата посещения врача'] = df['Дата посещения врача'].apply(get_season)
    
def anonymize_dates_takeaway(df: pd.DataFrame) -> None:
    df['Дата получения анализов'] = pd.to_datetime(df['Дата получения анализов'], errors='coerce')
    df['Дата получения анализов'] = df['Дата получения анализов'].apply(get_season)

def categorize_tests(value: str) -> str:
    value_l = str(value).lower()
    for category, tests in test_local_aggregation.items():
        for test in tests:
            if test.lower() in value_l:
                return category
    return 'Прочие исследования'

def anonymize_symptoms(df: pd.DataFrame) -> None:
    for category, symptoms in symptom_local_aggregation.items():
        df['Симптомы'] = df['Симптомы'].replace(symptoms, category)

def anonymize_tests(df: pd.DataFrame) -> None:
    df['Анализы'] = df['Анализы'].apply(categorize_tests)

def anonymize_doctors(df: pd.DataFrame) -> None:
    for category, doctors in doctors_local_aggregation.items():
        df['Выбор врача'] = df['Выбор врача'].replace(doctors, category)
